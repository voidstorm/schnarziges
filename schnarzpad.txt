My Schnarzpad

-Add stream ops to tuple class stuff
-Make ThreadContext::request_exit queue a command an return a future instead. 


-https://content.pivotal.io/blog/all-evidence-points-to-oop-being-bullshit
https://medium.com/@cscalfani/goodbye-object-oriented-programming-a59cda4c0e53
http://wiki.c2.com/?ArgumentsAgainstOop
http://steve-yegge.blogspot.com/2006/03/execution-in-kingdom-of-nouns.html

https://blogs.unity3d.com/2018/03/16/the-high-definition-render-pipeline-focused-on-visual-quality/

https://github.com/arximboldi/immer
https://www.youtube.com/watch?v=sPhpelUfu8Q

////-------------------------------------
/// Draft for game++ language-----------
////-----------------------------------

1.1 Scope of game++

The goal of game++ is to create a language framework for writing games. As such, the language should
provide direct support for game typical tasks, such as rendering, logic, resource management. The have
support on language level should help game developers to handle game specific tasks a lot easier. This includes
writing shaders and corresponding client code, game logic, network code, resource management and serialization.

1.2 Examples

opt
module MODULE_NAME::SUB_MODULE_NAME0...n{

    interface IF_NAME{
        interface SUB_IF_NAME{
            fun FN_NAME(param...) -> return_type : opt; 
        }
        fun FN_NAME(param...) -> return_type  : opt; 
    }


    class CLASS_NAME : INTERFACE0,...n{

        fun NAME(params..) -> return_type : opt{
            
        }
    }


    //Freestanding functions
    fun NAME(params..) -> return_type : opt{

        def a= 1.0f;
        //lambda
        def a_fun= fun(params)->rt{

        };

    //expressions
    def a= 1.0f;
    def a,b : float= 1.0f;
    def a,b : float= 1.0f, 2.0f;

    def l = [1,2,4];
    def l2 = [1...23, 5...7, !6]; 1..23, then 5..7, remove all 6s

    def l2 = [1...100, !{x % 2}]; //only odd numbers

    def l2 = [2:100]; //fills with 2 x 100 times 

    def l2 = [type:100]; //fills with type x 100 times 

    def l2 = [1..100] |> map (fun(x){x % 2});


    //lambda
    def a_fun= fun(params)->rt{

    };
 

    }


    struct a_file 
    {

    }

    resource a_resource
    {

    }

    task add_node (int a, int b) -> (int result, bool status){
        result= a*b;
        statust= true;
    }

    graph g(){
        add_node node(a= 1, b=2); //automatic parallel
        add_node node2(a= 1, b=2); //automatic parallel
        add_node node3(a= node1.result, b= node2.result);
        print_node p(node3);
    }

    graph g(async);
    g.execute();


}

lexer grammar gameppLexer;


// §3.9 Keywords

 MODULE : 'module';
 MUTABLE : 'mutable';
 NODE : 'node';
 TASK : 'task';
 GRAPH : 'graph';
 FUNCTION : 'fun'; 
 TYPE : 'type';
 SHARED : 'shared';
 FOR : 'for';
 WHILE : 'while';
 DO : 'do';
 IF : 'if';
 ELSE : 'else';
 RETURN : 'return';
 YIELD : 'yield';
 DEF : 'def';
 IN : 'in';
 SIZEOF : 'sizeof';
 COUNT : 'countof';
 TYPEOF : 'typeof';
 EXTENDS : 'extends';

 //code gen, präprocessor
 PPTYPE : '__type';
 PPFOR : '__for';
 PPWHILE : '__while';
 PPDO : '__do';
 PPIF : '__if';
 PPELSE : '__else';
 PPRETURN : '__return';
 PPYIELD : '__yield';
 PPDEF : '__def';
 PPIN : '__in';
 PPSIZEOF : '__sizeof';
 PPCOUNT : '__countof';
 PPTYPEOF : '__typeof';
 PPEXTENDS : '__extends';

 //types
 BYTE : 'byte';
 CHAR : 'char';
 LONG : 'long';
 HALF : 'half';
 INT : 'int';
 UINT : 'uint';
 COMPLEX : 'complex';
 FLOAT : 'float';
 STRING : 'string';
 //string prefixes
 UTF8 : 'utf8';
 UTF16 : 'utf16';
 UTF32 : 'utf32';
 TIME : 'time';

//u8char, u16string
 
 //suffixes N, NxN
 //e.g float4, float4x4, half float4


 STRUCT : 'struct';
 ARRAY : 'array';
 LIST : 'list';

// §3.10.1 Integer Literals
// §3.10.1 Integer Literals

IntegerLiteral
	:	DecimalIntegerLiteral
	|	HexIntegerLiteral
	|	OctalIntegerLiteral
	|	BinaryIntegerLiteral
	;

fragment
DecimalIntegerLiteral
	:	DecimalNumeral IntegerTypeSuffix?
	;

fragment
HexIntegerLiteral
	:	HexNumeral IntegerTypeSuffix?
	;

fragment
OctalIntegerLiteral
	:	OctalNumeral IntegerTypeSuffix?
	;

fragment
BinaryIntegerLiteral
	:	BinaryNumeral IntegerTypeSuffix?
	;

fragment
IntegerTypeSuffix
	:	[lL]
	;

fragment
DecimalNumeral
	:	'0'
	|	NonZeroDigit (Digits? | Underscores Digits)
	;

fragment
Digits
	:	Digit (DigitsAndUnderscores? Digit)?
	;

fragment
Digit
	:	'0'
	|	NonZeroDigit
	;

fragment
NonZeroDigit
	:	[1-9]
	;

fragment
DigitsAndUnderscores
	:	DigitOrUnderscore+
	;

fragment
DigitOrUnderscore
	:	Digit
	|	'_'
	;

fragment
Underscores
	:	'_'+
	;

fragment
HexNumeral
	:	'0' [xX] HexDigits
	;

fragment
HexDigits
	:	HexDigit (HexDigitsAndUnderscores? HexDigit)?
	;

fragment
HexDigit
	:	[0-9a-fA-F]
	;

fragment
HexDigitsAndUnderscores
	:	HexDigitOrUnderscore+
	;

fragment
HexDigitOrUnderscore
	:	HexDigit
	|	'_'
	;

fragment
OctalNumeral
	:	'0' Underscores? OctalDigits
	;

fragment
OctalDigits
	:	OctalDigit (OctalDigitsAndUnderscores? OctalDigit)?
	;

fragment
OctalDigit
	:	[0-7]
	;

fragment
OctalDigitsAndUnderscores
	:	OctalDigitOrUnderscore+
	;

fragment
OctalDigitOrUnderscore
	:	OctalDigit
	|	'_'
	;

fragment
BinaryNumeral
	:	'0' [bB] BinaryDigits
	;

fragment
BinaryDigits
	:	BinaryDigit (BinaryDigitsAndUnderscores? BinaryDigit)?
	;

fragment
BinaryDigit
	:	[01]
	;

fragment
BinaryDigitsAndUnderscores
	:	BinaryDigitOrUnderscore+
	;

fragment
BinaryDigitOrUnderscore
	:	BinaryDigit
	|	'_'
	;

// §3.10.2 Floating-Point Literals

FloatingPointLiteral
	:	DecimalFloatingPointLiteral
	|	HexadecimalFloatingPointLiteral
	;

fragment
DecimalFloatingPointLiteral
	:	Digits '.' Digits? ExponentPart? FloatTypeSuffix?
	|	'.' Digits ExponentPart? FloatTypeSuffix?
	|	Digits ExponentPart FloatTypeSuffix?
	|	Digits FloatTypeSuffix
	;

fragment
ExponentPart
	:	ExponentIndicator SignedInteger
	;

fragment
ExponentIndicator
	:	[eE]
	;

fragment
SignedInteger
	:	Sign? Digits
	;

fragment
Sign
	:	[+-]
	;

fragment
FloatTypeSuffix
	:	[fFdD]
	;

fragment
HexadecimalFloatingPointLiteral
	:	HexSignificand BinaryExponent FloatTypeSuffix?
	;

fragment
HexSignificand
	:	HexNumeral '.'?
	|	'0' [xX] HexDigits? '.' HexDigits
	;

fragment
BinaryExponent
	:	BinaryExponentIndicator SignedInteger
	;

fragment
BinaryExponentIndicator
	:	[pP]
	;

// §3.10.3 Boolean Literals

BooleanLiteral
	:	'true'
	|	'false'
	;

// §3.10.4 Character Literals

CharacterLiteral
	:	'\'' SingleCharacter '\''
	|	'\'' EscapeSequence '\''
	;

fragment
SingleCharacter
	:	~['\\\r\n]
	;
// §3.10.5 String Literals
StringLiteral
	:	'"' StringCharacters? '"'
	;
fragment
StringCharacters
	:	StringCharacter+
	;
fragment
StringCharacter
	:	~["\\\r\n]
	|	EscapeSequence
	;
// §3.10.6 Escape Sequences for Character and String Literals
fragment
EscapeSequence
	:	'\\' [btnfr"'\\]
	|	OctalEscape
    |   UnicodeEscape // This is not in the spec but prevents having to preprocess the input
	;

fragment
OctalEscape
	:	'\\' OctalDigit
	|	'\\' OctalDigit OctalDigit
	|	'\\' ZeroToThree OctalDigit OctalDigit
	;

fragment
ZeroToThree
	:	[0-3]
	;

// This is not in the spec but prevents having to preprocess the input
fragment
UnicodeEscape
    :   '\\' 'u'+ HexDigit HexDigit HexDigit HexDigit
    ;

// §3.10.7 The Null Literal

NullLiteral
	:	'null'
	;

// §3.11 Separators

LPAREN : '(';
RPAREN : ')';
LBRACE : '{';
RBRACE : '}';
LBRACK : '[';
RBRACK : ']';
SEMI : ';';
COMMA : ',';
DOT : '.';
ELLIPSIS : '...';
AT : '@';
COLONCOLON : '::';


// §3.12 Operators

ASSIGN : '=';
GT : '>';
LT : '<';
BANG : '!';
TILDE : '~';
QUESTION : '?';
COLON : ':';
ARROW : '->';
EQUAL : '==';
LE : '<=';
GE : '>=';
NOTEQUAL : '!=';
AND : '&&';
OR : '||';
INC : '++';
DEC : '--';
ADD : '+';
SUB : '-';
MUL : '*';
DIV : '/';
BITAND : '&';
BITOR : '|';
CARET : '^';
MOD : '%';
LSHIFT : '<<';
RSHIFT : '>>';
//URSHIFT : '>>>';

ADD_ASSIGN : '+=';
SUB_ASSIGN : '-=';
MUL_ASSIGN : '*=';
DIV_ASSIGN : '/=';
AND_ASSIGN : '&=';
OR_ASSIGN : '|=';
XOR_ASSIGN : '^=';
MOD_ASSIGN : '%=';
LSHIFT_ASSIGN : '<<=';
RSHIFT_ASSIGN : '>>=';
URSHIFT_ASSIGN : '>>>=';

// §3.8 Identifiers (must appear after all keywords in the grammar)

Identifier
	:	JavaLetter JavaLetterOrDigit*
	;

fragment
JavaLetter
	:	[a-zA-Z$_] // these are the "java letters" below 0x7F
	|	// covers all characters above 0x7F which are not a surrogate
		~[\u0000-\u007F\uD800-\uDBFF]
		{Character.isJavaIdentifierStart(_input.LA(-1))}?
	|	// covers UTF-16 surrogate pairs encodings for U+10000 to U+10FFFF
		[\uD800-\uDBFF] [\uDC00-\uDFFF]
		{Character.isJavaIdentifierStart(Character.toCodePoint((char)_input.LA(-2), (char)_input.LA(-1)))}?
	;

fragment
JavaLetterOrDigit
	:	[a-zA-Z0-9$_] // these are the "java letters or digits" below 0x7F
	|	// covers all characters above 0x7F which are not a surrogate
		~[\u0000-\u007F\uD800-\uDBFF]
		{Character.isJavaIdentifierPart(_input.LA(-1))}?
	|	// covers UTF-16 surrogate pairs encodings for U+10000 to U+10FFFF
		[\uD800-\uDBFF] [\uDC00-\uDFFF]
		{Character.isJavaIdentifierPart(Character.toCodePoint((char)_input.LA(-2), (char)_input.LA(-1)))}?
	;

//
// Whitespace and comments
//

WS  :  [ \t\r\n\u000C]+ -> skip
    ;

COMMENT
    :   '/*' .*? '*/' -> channel(HIDDEN)
    ;

LINE_COMMENT
    :   '//' ~[\r\n]* -> channel(HIDDEN)
;

module app{
    import time, io;

    node calc_date->(time current_date){
        current_date= getCurrentTime();
    }

    node hello_data(time current_date)->(string output){
        output= "hello world its: " + time.as_time(current_date);
    }

    node hello(string input){
        task{
            io.println("hello world");
        }
    }

    graph main(){
        hello_data hellod(current_date= calc_date.current_date);
        hello hello_world(hello_data.output);
    }
}

